#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        Layer6 {
            bindings = <&to 6>;
            key-positions = <34 35>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <23 24>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W     &kp E     &kp R                       &kp T                                                       &kp Y                &kp U  &kp I        &kp O    &kp P
&kp A             &kp S     &kp D     &kp F                       &kp G        &tog 2                      &kp MINUS          &kp H                &kp J  &kp K        &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X     &kp C     &kp V                       &kp B        &kp LEFT_BRACKET            &kp RIGHT_BRACKET  &kp N                &kp M  &lt 5 COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LALT  &kp LGUI  &lt_to_layer_0 3 LS(LANG2)  &lt 1 SPACE  &lt_to_layer_0 2 LANG1      &kp BACKSPACE      &mt RIGHT_WIN ENTER                               &mt RIGHT_CONTROL UNDER
            >;

            sensor-bindings = <&inc_dec_kp LC(LEFT) LC(RIGHT)>;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT                                 &kp AMPERSAND  &kp SQT       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL
&trans           &trans             &trans    &trans      &trans       &trans          &kp BACKSLASH  &kp PIPE       &kp AT_SIGN   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp COLON
&trans           &trans             &trans    &trans      &trans       &bt BT_CLR      &kp ESCAPE     &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3           &bt BT_SEL 4
&trans           &trans             &trans    &trans      &trans       &trans          &trans         &trans                                                                    &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE            &trans                &trans        &trans        &trans                        &kp LC(LEFT_ARROW)      &trans          &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)      &trans
&kp C_BRI_DN          &kp C_BRI_UP          &kp C_VOL_DN  &kp C_VOL_UP  &trans  &tog 0      &kp HOME  &kp LEFT_ARROW          &kp DOWN_ARROW  &kp UP_ARROW      &kp RIGHT_ARROW          &kp END
&kp LG(LS(NUMBER_3))  &kp LS(LG(NUMBER_4))  &trans        &trans        &trans  &trans      &trans    &kp LS(LC(LEFT_ARROW))  &trans          &trans            &kp LS(LC(RIGHT_ARROW))  &trans
&trans                &trans                &trans        &trans        &trans  &trans      &trans    &trans                                                                             &trans
            >;
        };

        FUNCTION_NUMBER {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &kp F10                      &trans      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK
&trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans  &kp PERIOD  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans  &kp N0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS
&trans  &trans  &trans  &trans  &trans   &trans      &trans  &trans                                                &kp ENTER
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BULETOOTH {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
